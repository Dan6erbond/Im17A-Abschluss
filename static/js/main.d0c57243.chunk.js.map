{"version":3,"sources":["pages/MGuignard/MGuignard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["limericks","author","text","MGuignard","Carousel","style","background","array","i","length","j","Math","floor","random","temp","shuffleArray","map","l","Item","padding","textAlign","fontSize","color","fontFamily","split","t","Container","fluid","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAGMA,EAAY,CACd,CACIC,OAAQ,iBACRC,KAAM,yIAEV,CACID,OAAQ,cACRC,KAAM,sNAEV,CACID,OAAQ,oBACRC,KAAM,yPAEV,CACID,OAAQ,iBACRC,KAAM,oMAEV,CACID,OAAQ,eACRC,KAAM,uLAEV,CACID,OAAQ,iBACRC,KAAM,kKAEV,CACID,OAAQ,gBACRC,KAAK,oLAET,CACID,OAAQ,mBACRC,KAAM,mNAEV,CACID,OAAQ,oBACRC,KAAK,kJAeE,SAASC,IACpB,OACI,gBAAC,WAAD,KACI,gBAACC,EAAA,EAAD,CAAUC,MAAO,CAACC,WAAY,SAd1C,SAAsBC,GAElB,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACf,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEf,OAAOP,EAOMQ,CAAaf,GAAWgB,KAAI,SAACC,EAAGT,GAAJ,OAAU,gBAACJ,EAAA,EAASc,KAAV,KACnC,uBAAKb,MAAO,CAACc,QAAS,OAAQC,UAAW,SAAUC,SAAU,OAAQC,MAAO,UACxE,qBAAGjB,MAAO,CAACkB,WAAY,aAAcF,SAAU,QAC1CJ,EAAEf,KAAKsB,MAAM,MAAMR,KAAI,SAACS,EAAWf,GAAZ,OAA0B,4BAAOe,EAAE,gCAG/D,+BAAOR,EAAEhB,cAKrB,gBAACyB,EAAA,EAAD,CAAWC,MAAM,QCrBdC,MA3Cf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,YACR,+CAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,kBAAC1B,EAAD,OAEJ,kBAAC,IAAD,CAAO0B,KAAK,YACR,2CAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,gDAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,qDAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,iDAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,gDAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,iDAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,6CAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,iDAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,4CAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,oDC7BIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCVNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD+HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0c57243.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport {Carousel, Container} from \"react-bootstrap\";\r\n\r\nconst limericks = [\r\n    {\r\n        author: \"Dominik Berger\",\r\n        text: \"The name is Ravi\\nHe's probbaly related to Ghandi\\nA little man indeed\\nAlways down to a feat\\nNow, have you met his boyfriend Randy?\"\r\n    },\r\n    {\r\n        author: \"Simon Kunze\",\r\n        text: \"There lived a young man in a village near Zürich\\nWhose task it was to compose a limerick\\n'Twas a while 'til he followed through\\nAnd uncreative he was to boot\\nNo wonder then that it came out a little shit\"\r\n    },\r\n    {\r\n        author: \"Alexander Greuter\",\r\n        text: \"There once was a doctor called crane\\nHe spent most of his life in vain\\nHe even showed up in a movie once or twice\\nThe one starring that rat guy which might not come as a surprise\\nDespite all that he couldn’t even think of a fitting name\"\r\n    },\r\n    {\r\n        author: \"Alain Siegrist\",\r\n        text: \"There once was a German man\\nHe had a \\\"great\\\" plan\\nHe promised to make the country strong\\nFor some reason nobody thought he was wrong\\nThen he committed genocide better than the ku klux klan\"\r\n    },\r\n    {\r\n        author: \"Felix Fasler\",\r\n        text: \"There once was a man who lay in the grass\\nHe wasn't able to play a nice pass\\nSome said he should be ignored\\nAnd told us about Rashford\\nBut most still thought he was pure class\"\r\n    },\r\n    {\r\n        author: \"Albion Spahija\",\r\n        text: \"There once was a man in seventh heaven,\\nDriving peacefully in his Porsche 911,\\nUntil one day,\\nA foreign masked man came,\\nAnd shot the driver with a AK-47.\"\r\n    },\r\n    {\r\n        author: \"Tim Mosbacher\",\r\n        text:\"There was once a man riding a bear\\nHe was the american nightmare\\nPutin was the name\\noff the person playing the war game\\nBut nobody knows, that he sells selfmade knightwear.\"\r\n    },\r\n    {\r\n        author: \"Aron Eggenberger\",\r\n        text: \"The lovely wife who awaits inevitable doom\\nSwiftly she cleans the floor with a broom\\nVery early, her husband comes home\\nThankfully, he sees his wife alone\\nWhat he won't see is the man in the storage room\"\r\n    },\r\n    {\r\n        author: \"RaviAnand Mohabir\",\r\n        text:\"There was a country of Azerbaijan,\\nwhere Dominik had gone.\\nHe was met by some Arabs,\\nthat put him on some camels.\\nNow he is the new Khan.\"\r\n    }\r\n];\r\n\r\nfunction shuffleArray(array: any[]) {\r\n    let i = array.length - 1;\r\n    for (; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n    return array;\r\n}\r\n\r\nexport default function MGuignard() {\r\n    return (\r\n        <React.Fragment>\r\n            <Carousel style={{background: '#000'}}>\r\n                {shuffleArray(limericks).map((l, i) => <Carousel.Item>\r\n                    <div style={{padding: '50px', textAlign: 'center', fontSize: '16px', color: 'white'}}>\r\n                        <p style={{fontFamily: 'Yellowtail', fontSize: '4vw'}}>\r\n                            {l.text.split(\"\\n\").map((t: string, j: number) => <span>{t}<br/></span>)}\r\n                        </p>\r\n\r\n                        <p> - {l.author}</p>\r\n                    </div>\r\n                </Carousel.Item>)}\r\n            </Carousel>\r\n\r\n            <Container fluid=\"md\">\r\n            </Container>\r\n        </React.Fragment>\r\n    );\r\n}","import React from 'react';\nimport {Route, Switch} from \"react-router\";\nimport MGuignard from \"./pages/MGuignard/MGuignard\";\n\nfunction App() {\n    return (\n        <Switch>\n            <Route path=\"/bLUb5kH\">\n                <div>Matthias Graf</div>\n            </Route>\n            <Route path=\"/N6bmxqI\">\n                <MGuignard/>\n            </Route>\n            <Route path=\"/SWH6Yjq\">\n                <div>Lil Klink</div>\n            </Route>\n            <Route path=\"/EkmjaQB\">\n                <div>Loredana Arleo</div>\n            </Route>\n            <Route path=\"/dshb4LF\">\n                <div>Daniel Schneeberger</div>\n            </Route>\n            <Route path=\"/hJAQqe4\">\n                <div>Genevieve Gross</div>\n            </Route>\n            <Route path=\"/eccFgkV\">\n                <div>Andreas Neeser</div>\n            </Route>\n            <Route path=\"/DSraT8n\">\n                <div>Sascha Fiechter</div>\n            </Route>\n            <Route path=\"/arJqAVL\">\n                <div>Fabian Jerg</div>\n            </Route>\n            <Route path=\"/cii6Kwf\">\n                <div>Alexander Flick</div>\n            </Route>\n            <Route path=\"/iy4e0Rr\">\n                <div>Lars Meyer</div>\n            </Route>\n            <Route path=\"/5rM6ams\">\n                <div>Réne Weidmann</div>\n            </Route>\n        </Switch>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\nimport \"./index.scss\";\n\nReactDOM.render(\n    <HashRouter>\n        <App/>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}